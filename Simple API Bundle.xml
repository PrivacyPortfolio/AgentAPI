<?xml version="1.0" encoding="utf-8"?>

<!-- Request as an API transaction type on Bundle -->

<Bundle xmlns="http://hl7.org/fhir">
  xs:element name="Bundle" type="Bundle"
  <!-- A container for a collection of resources. -->
  <xs:complexType name="Bundle">
	<identifier>
		xs:element name="identifier" minOccurs="0" maxOccurs="1" type="Identifier"
    	<!-- A persistent identifier for the bundle that won't change as a bundle is copied from server to server.-->		
		<xs:complexType name="Identifier">
		<use>
			<value>usual, official, temp, secondary</value>
		</use>
		<label></label>
		<system></system>
		<value></value>
		<period>
			<start></start>
			<end></end>
		</period>
		<assigner>
			<reference></reference>
			<display></display>
		</assigner>
		</xs:complexType>
	</identifier>
	<type>
		xs:element name="type" minOccurs="1" maxOccurs="1" type="BundleType"
		<!-- Indicates the purpose of this bundle - how it is intended to be used. -->
		<xs:complexType name="BundleType">
			<xs:attribute name="value" type="BundleType-list" use="optional"/>
		</xs:complexType>
		<xs:simpleType name="BundleType-list">
			<xs:enumeration value="document" />
			<xs:enumeration value="message" />
			<xs:enumeration value="transaction" />
			<xs:enumeration value="transaction-response" />
			<xs:enumeration value="batch" />
			<xs:enumeration value="batch-response" />
			<xs:enumeration value="history" />
			<xs:enumeration value="searchset" />
			<xs:enumeration value="collection" />
		</xs:simpleType>
		</xs:complexType>
  	</type>
	<timestamp>
	  xs:element name="timestamp" minOccurs="0" maxOccurs="1" type="instant"
	  <!-- The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle.  -->
	</timestamp>
	<total>
	  xs:element name="total" minOccurs="0" maxOccurs="1" type="unsignedInt"
	  <!-- If a set of search matches, this is the total number of entries of type 'match' across all pages 
	  in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide
	  a count of the number of entries in the Bundle.  -->  
	</total>
	<link>xs:element name="link" type="Bundle.Link" minOccurs="0" maxOccurs="unbounded"
    <!--  A series of links that provide context to this bundle.  -->		
		<xs:complexType name="Bundle.Link">
		<relation>
		  xs:element name="relation" minOccurs="1" maxOccurs="1" type="string"
		  <!-- A name which details the functional use for this link -->
	  	</relation>
		<url>
		  xs:element name="url" minOccurs="1" maxOccurs="1" type="uri"
		  <!-- The reference details for the link. -->
		</url>
		</xs:complexType>
	</link>
	<entry>
      xs:element name="entry" type="Bundle.Entry" minOccurs="0" maxOccurs="unbounded"
  	  <!-- An entry in a bundle resource - will either contain a resource 
	  or information about a resource (transactions and history only). -->
		<link>
		  xs:element name="link" type="Bundle.Link" minOccurs="0" maxOccurs="unbounded"
		  <!-- A series of links that provide context to this entry.  -->
		</link>
		<fullUrl>
		  xs:element name="fullUrl" minOccurs="0" maxOccurs="1" type="uri"
		  <!-- The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id in the resource 
		  - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with 
		  the Resource.id. The fullUrl is a version independent reference to the resource. The fullUrl element 
		  SHALL have a value except that: 
      	  * fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)
      	  * Results from operations might involve resources that are not identified. -->
		</fullUrl>
		<!-- request -->
		<request>
		  xs:element name="request" type="Bundle.Request" minOccurs="0" maxOccurs="1"
		  <!-- Additional information about how this entry should be processed as part of a transaction or batch.  
		  For history, it shows how the entry was processed to create the version contained in the entry. -->
			<xs:complexType name="Bundle.Request">
				<method>
				  xs:element name="method" minOccurs="1" maxOccurs="1" type="HTTPVerb"
		          <!-- In a transaction or batch, this is the HTTP action to be executed for this entry. 
        		  In a history bundle, this indicates the HTTP action that occurred. -->
				  <xs:complexType name="HTTPVerb">
					<xs:attribute name="value" type="HTTPVerb-list" use="optional"/>
				  </xs:complexType>
				  <xs:simpleType name="HTTPVerb-list">
					<xs:enumeration value="GET" />
					<xs:enumeration value="HEAD" />
					<xs:enumeration value="POST" />
					<xs:enumeration value="PUT" />
					<xs:enumeration value="DELETE" />
					<xs:enumeration value="PATCH" />
				  </xs:simpleType>
				</method>
				<url>
				  xs:element name="url" minOccurs="1" maxOccurs="1" type="uri"
				  <!-- The URL for this entry, relative to the root (the address to which the request is posted).-->
				</url>
				<ifNoneMatch>xs:element name="ifNoneMatch" minOccurs="0" maxOccurs="1" type="string"</ifNoneMatch>
				<ifModifiedSince>xs:element name="ifModifiedSince" minOccurs="0" maxOccurs="1" type="instant"</ifModifiedSince>
				<ifMatch>xs:element name="ifMatch" minOccurs="0" maxOccurs="1" type="string"</ifMatch>
				<ifNoneExist>xs:element name="ifNoneExist" minOccurs="0" maxOccurs="1" type="string"</ifNoneExist>
			</xs:complexType>
		</request>
		<response>
      	  xs:element name="response" type="Bundle.Response" minOccurs="0" maxOccurs="1"
		  <!-- A container for a collection of resources. -->
		  <!-- Indicates the results of processing the corresponding 'request' entry in the batch 
		  or transaction being responded to or what the results of an operation where when returning history. -->
		  <xs:complexType name="Bundle.Response">
  			<status>
  			  xs:element name="status" minOccurs="1" maxOccurs="1" type="string"
  			  <!-- The status code returned by processing this entry. 
  			  The status SHALL start with a 3 digit HTTP code (e.g. 404) 
  			  and may contain the standard HTTP description associated with the status code.   -->
  			</status>
	  		<location>
	  		  xs:element name="location" minOccurs="0" maxOccurs="1" type="uri"
	  		  <!-- The location header created by processing this operation, 
	  		  populated if the operation returns a location.   -->
	  		</location>
		  	<etag>
		  	  xs:element name="etag" minOccurs="0" maxOccurs="1" type="string"
		  	  <!-- The Etag for the resource, if the operation for the entry produced a versioned resource 
		  	  (used for Resource Metadata and Versioning and Managing Resource Contention(concurrency).   -->
		  	</etag>
			<lastModified>
			  xs:element name="lastModified" minOccurs="0" maxOccurs="1" type="instant"
			  <!-- The date/time that the resource was modified on the server.   -->
			</lastModified>
			<outcome>
			  xs:element name="outcome" minOccurs="0" maxOccurs="1" type="ResourceContainer"
			  <!-- An OperationOutcome containing hints and warnings produced 
			  as part of processing this entry in a batch or transaction.   -->
			</outcome>
		  </xs:complexType>
		</response>
	</entry>
	<signature>
	  xs:element name="signature" minOccurs="0" maxOccurs="1" type="Signature"
	  <!-- Digital Signature - base64 encoded. XML-DSig or a JWT.   -->
 	  <xs:complexType name="Signature">
		<type>
			<!-- 1..* Coding Indication of the reason the entity signed the object(s) -->
		</type>
		<when value="[instant]"/><!-- 1..1 When the signature was created -->
		<who>
			<!-- 1..1 Reference(Practitioner|PractitionerRole|RelatedPerson|Patient|Device|Organization) Who signed -->
		</who>
		<onBehalfOf>
			<!-- 0..1 Reference(Practitioner|PractitionerRole|RelatedPerson|Patient|Device|Organization) The party represented -->
		</onBehalfOf>
		<targetFormat value="[code]"/><!-- 0..1 The technical format of the signed resources -->
		<sigFormat value="[code]"/><!-- 0..1 The technical format of the signature -->
		<data value="[base64Binary]"/><!-- 0..1 The actual signature content (XML DigSig. JWS, picture, etc.) -->
      </xs:complexType>
	</signature>
</Bundle>
